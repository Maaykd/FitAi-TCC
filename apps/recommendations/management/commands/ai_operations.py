# apps/recommendations/management/commands/ai_operations.py
import json
import time
from datetime import datetime, timedelta
from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth.models import User
from django.core.cache import cache
from django.conf import settings
from django.utils import timezone

from apps.users.models import UserProfile
from apps.recommendations.services.ai_service import AIService
from apps.recommendations.services.recommendation_engine import RecommendationEngine
from apps.workouts.models import WorkoutSession


class Command(BaseCommand):
    help = 'Gerencia opera√ß√µes de IA do FitAI - testes, diagn√≥sticos e manuten√ß√£o'

    def add_arguments(self, parser):
        """Define argumentos do comando"""
        parser.add_argument(
            'action',
            type=str,
            choices=['test', 'diagnose', 'generate_batch', 'stats', 'clear_cache', 'validate_setup'],
            help='A√ß√£o a ser executada'
        )
        
        parser.add_argument(
            '--user-id',
            type=int,
            help='ID do usu√°rio para opera√ß√µes espec√≠ficas'
        )
        
        parser.add_argument(
            '--count',
            type=int,
            default=5,
            help='N√∫mero de itens para opera√ß√µes em lote (default: 5)'
        )
        
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa opera√ß√£o mesmo com limita√ß√µes'
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Sa√≠da detalhada'
        )

    def handle(self, *args, **options):
        """Handler principal do comando"""
        action = options['action']
        
        # Banner de in√≠cio
        self.stdout.write(
            self.style.SUCCESS('ü§ñ FITAI - AI OPERATIONS MANAGER')
        )
        self.stdout.write(f"Executando a√ß√£o: {action}")
        self.stdout.write(f"Timestamp: {datetime.now().isoformat()}")
        self.stdout.write("-" * 50)
        
        try:
            # Dispatch para a√ß√£o espec√≠fica
            if action == 'test':
                self.handle_test(options)
            elif action == 'diagnose':
                self.handle_diagnose(options)
            elif action == 'generate_batch':
                self.handle_generate_batch(options)
            elif action == 'stats':
                self.handle_stats(options)
            elif action == 'clear_cache':
                self.handle_clear_cache(options)
            elif action == 'validate_setup':
                self.handle_validate_setup(options)
                
        except Exception as e:
            raise CommandError(f'Erro na execu√ß√£o: {e}')
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Opera√ß√£o conclu√≠da com sucesso!')
        )

    def handle_test(self, options):
        """Testa integra√ß√£o com OpenAI"""
        self.stdout.write("üß™ TESTANDO INTEGRA√á√ÉO OPENAI")
        
        ai_service = AIService()
        
        # 1. Teste de disponibilidade
        self.stdout.write(f"API Dispon√≠vel: {ai_service.is_available}")
        
        if not ai_service.is_available:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è OpenAI n√£o dispon√≠vel. Verificar configura√ß√µes.")
            )
            self._show_setup_help()
            return
        
        # 2. Teste de conectividade
        self.stdout.write("Testando conectividade...")
        connection_test = ai_service._test_api_connection()
        self.stdout.write(f"Conex√£o OpenAI: {'‚úÖ' if connection_test else '‚ùå'}")
        
        # 3. Teste com usu√°rio real
        user = self._get_test_user(options.get('user_id'))
        if not user:
            return
            
        try:
            profile = UserProfile.objects.get(user=user)
        except UserProfile.DoesNotExist:
            self.stdout.write(
                self.style.ERROR("‚ùå Usu√°rio n√£o tem perfil. Use um usu√°rio com perfil completo.")
            )
            return
        
        self.stdout.write(f"Testando com usu√°rio: {user.username}")
        
        # 4. Teste de gera√ß√£o de treino
        if options.get('force') or input("Testar gera√ß√£o de treino? (s/N): ").lower() == 's':
            self.stdout.write("Gerando treino de teste...")
            start_time = time.time()
            
            workout = ai_service.generate_personalized_workout_plan(
                profile, 30, 'full_body', 'intermediate'
            )
            
            elapsed = time.time() - start_time
            
            if workout:
                self.stdout.write(f"‚úÖ Treino gerado em {elapsed:.2f}s")
                self.stdout.write(f"Nome: {workout.get('workout_name', 'N/A')}")
                self.stdout.write(f"Exerc√≠cios: {len(workout.get('exercises', []))}")
                self.stdout.write(f"Score de qualidade: {workout.get('quality_score', 'N/A')}")
                
                if options.get('verbose'):
                    self._show_workout_details(workout)
            else:
                self.stdout.write("‚ùå Falha na gera√ß√£o do treino")
        
        # 5. Teste de an√°lise de progresso
        if options.get('force') or input("Testar an√°lise de progresso? (s/N): ").lower() == 's':
            self.stdout.write("Analisando progresso...")
            start_time = time.time()
            
            analysis = ai_service.analyze_user_progress(profile)
            elapsed = time.time() - start_time
            
            if analysis:
                self.stdout.write(f"‚úÖ An√°lise gerada em {elapsed:.2f}s")
                self.stdout.write(f"Progresso geral: {analysis.get('overall_progress', 'N/A')}")
                
                if options.get('verbose'):
                    self._show_analysis_details(analysis)
            else:
                self.stdout.write("‚ùå Falha na an√°lise de progresso")
        
        # 6. Teste de mensagem motivacional
        if options.get('force') or input("Testar mensagem motivacional? (s/N): ").lower() == 's':
            message = ai_service.generate_motivational_content(profile, 'workout_start')
            
            if message:
                self.stdout.write("‚úÖ Mensagem motivacional:")
                self.stdout.write(f"'{message}'")
            else:
                self.stdout.write("‚ùå Falha na gera√ß√£o de mensagem")

    def handle_diagnose(self, options):
        """Diagn√≥stica sistema de IA"""
        self.stdout.write("üîç DIAGN√ìSTICO DO SISTEMA DE IA")
        
        # 1. Configura√ß√µes
        self.stdout.write("\nüìã CONFIGURA√á√ïES:")
        config_items = [
            ('OPENAI_API_KEY', '***' if settings.OPENAI_API_KEY else 'N√ÉO CONFIGURADA'),
            ('OPENAI_MODEL', getattr(settings, 'OPENAI_MODEL', 'N/A')),
            ('OPENAI_MAX_TOKENS', getattr(settings, 'OPENAI_MAX_TOKENS', 'N/A')),
            ('OPENAI_TEMPERATURE', getattr(settings, 'OPENAI_TEMPERATURE', 'N/A')),
            ('AI_FEATURES_ENABLED', getattr(settings, 'AI_FEATURES_ENABLED', 'N/A')),
        ]
        
        for key, value in config_items:
            self.stdout.write(f"  {key}: {value}")
        
        # 2. Estado do cache
        ai_service = AIService()
        self.stdout.write("\nüíæ CACHE:")
        
        rate_limit_data = cache.get(ai_service.rate_limit_cache_key, {})
        self.stdout.write(f"  Rate limit count: {rate_limit_data.get('count', 0)}")
        
        temp_disabled = cache.get("openai_temp_disabled", False)
        self.stdout.write(f"  Temporariamente desabilitado: {temp_disabled}")
        
        # 3. Estat√≠sticas de uso
        stats = ai_service.get_api_usage_stats()
        if 'usage_today' in stats:
            self.stdout.write("\nüìä USO HOJE:")
            usage = stats['usage_today']
            self.stdout.write(f"  Requisi√ß√µes: {usage.get('requests_made', 0)}")
            self.stdout.write(f"  Tokens usados: {usage.get('tokens_used', 0)}")
            self.stdout.write(f"  Rate limit restante: {usage.get('rate_limit_remaining', 0)}")
        
        # 4. Status dos usu√°rios
        self.stdout.write("\nüë• USU√ÅRIOS:")
        total_users = User.objects.count()
        users_with_profile = UserProfile.objects.count()
        users_with_sessions = WorkoutSession.objects.values('user').distinct().count()
        
        self.stdout.write(f"  Total de usu√°rios: {total_users}")
        self.stdout.write(f"  Com perfil completo: {users_with_profile}")
        self.stdout.write(f"  Com sess√µes de treino: {users_with_sessions}")
        
        # 5. Recomenda√ß√µes
        self.stdout.write("\nüéØ RECOMENDA√á√ïES:")
        
        issues = []
        recommendations = []
        
        if not settings.OPENAI_API_KEY:
            issues.append("API Key n√£o configurada")
            recommendations.append("Configure OPENAI_API_KEY no arquivo .env")
        
        if rate_limit_data.get('count', 0) > 40:
            issues.append("Rate limit pr√≥ximo do limite")
            recommendations.append("Monitore uso da API ou aumente limite")
        
        if temp_disabled:
            issues.append("API temporariamente desabilitada")
            recommendations.append("Aguarde alguns minutos e teste novamente")
        
        if users_with_profile < total_users:
            issues.append("Usu√°rios sem perfil completo")
            recommendations.append("Incentive usu√°rios a completarem o perfil")
        
        if issues:
            for issue in issues:
                self.stdout.write(self.style.WARNING(f"  ‚ö†Ô∏è {issue}"))
        
        if recommendations:
            self.stdout.write("\nüí° A√á√ïES SUGERIDAS:")
            for rec in recommendations:
                self.stdout.write(f"  ‚Ä¢ {rec}")
        
        if not issues:
            self.stdout.write("  ‚úÖ Sistema funcionando normalmente")

    def handle_generate_batch(self, options):
        """Gera recomenda√ß√µes em lote para usu√°rios"""
        count = options['count']
        self.stdout.write(f"üîÑ GERANDO {count} RECOMENDA√á√ïES EM LOTE")
        
        # Buscar usu√°rios ativos com perfil
        users = User.objects.filter(
            userprofile__isnull=False,
            workoutsession__created_at__gte=timezone.now() - timedelta(days=30)
        ).distinct()[:count]
        
        if not users.exists():
            self.stdout.write(
                self.style.WARNING("‚ùå Nenhum usu√°rio ativo encontrado")
            )
            return
        
        ai_service = AIService()
        recommendation_engine = RecommendationEngine()
        
        success_count = 0
        error_count = 0
        
        for user in users:
            try:
                self.stdout.write(f"Processando {user.username}...")
                
                # Gerar recomenda√ß√µes h√≠bridas
                recommendations = recommendation_engine.generate_recommendations(
                    user=user,
                    algorithm='hybrid',
                    limit=3
                )
                
                if recommendations:
                    success_count += 1
                    self.stdout.write(f"  ‚úÖ {len(recommendations)} recomenda√ß√µes geradas")
                else:
                    error_count += 1
                    self.stdout.write("  ‚ùå Falha na gera√ß√£o")
                
                # Pequena pausa para n√£o sobrecarregar
                time.sleep(0.5)
                
            except Exception as e:
                error_count += 1
                self.stdout.write(f"  ‚ùå Erro: {e}")
        
        self.stdout.write(f"\nüìä RESULTADOS:")
        self.stdout.write(f"  Sucessos: {success_count}")
        self.stdout.write(f"  Erros: {error_count}")
        self.stdout.write(f"  Taxa de sucesso: {success_count/(success_count+error_count)*100:.1f}%")

    def handle_stats(self, options):
        """Mostra estat√≠sticas detalhadas"""
        self.stdout.write("üìä ESTAT√çSTICAS DE IA")
        
        ai_service = AIService()
        
        # Stats da API
        api_stats = ai_service.get_api_usage_stats()
        self.stdout.write("\nüîå API OpenAI:")
        self.stdout.write(f"  Status: {'‚úÖ Ativa' if api_stats.get('api_available') else '‚ùå Inativa'}")
        
        if 'usage_today' in api_stats:
            usage = api_stats['usage_today']
            self.stdout.write(f"  Requisi√ß√µes hoje: {usage.get('requests_made', 0)}")
            self.stdout.write(f"  Tokens consumidos: {usage.get('tokens_used', 0)}")
            
            # Estimativa de custo (aproximado para GPT-3.5-turbo)
            tokens = usage.get('tokens_used', 0)
            estimated_cost = tokens * 0.002 / 1000  # $0.002 per 1K tokens
            self.stdout.write(f"  Custo estimado: ${estimated_cost:.4f}")
        
        # Stats dos usu√°rios
        self.stdout.write("\nüë§ USU√ÅRIOS:")
        
        total_profiles = UserProfile.objects.count()
        active_users = User.objects.filter(
            workoutsession__created_at__gte=timezone.now() - timedelta(days=7)
        ).distinct().count()
        
        self.stdout.write(f"  Perfis completos: {total_profiles}")
        self.stdout.write(f"  Usu√°rios ativos (7 dias): {active_users}")
        
        # Goals distribution
        goals = UserProfile.objects.values_list('goal', flat=True)
        goal_distribution = {}
        for goal in goals:
            goal_distribution[goal] = goal_distribution.get(goal, 0) + 1
        
        self.stdout.write("\nüéØ DISTRIBUI√á√ÉO DE OBJETIVOS:")
        for goal, count in goal_distribution.items():
            percentage = count / total_profiles * 100 if total_profiles > 0 else 0
            self.stdout.write(f"  {goal or 'n√£o definido'}: {count} ({percentage:.1f}%)")
        
        # Workout sessions stats
        recent_sessions = WorkoutSession.objects.filter(
            created_at__gte=timezone.now() - timedelta(days=30)
        )
        
        total_sessions = recent_sessions.count()
        completed_sessions = recent_sessions.filter(completed=True).count()
        completion_rate = completed_sessions / total_sessions * 100 if total_sessions > 0 else 0
        
        self.stdout.write(f"\nüèãÔ∏è TREINOS (30 DIAS):")
        self.stdout.write(f"  Total de sess√µes: {total_sessions}")
        self.stdout.write(f"  Sess√µes completadas: {completed_sessions}")
        self.stdout.write(f"  Taxa de conclus√£o: {completion_rate:.1f}%")

    def handle_clear_cache(self, options):
        """Limpa cache de IA"""
        self.stdout.write("üßπ LIMPANDO CACHE DE IA")
        
        ai_service = AIService()
        
        # Listar itens que ser√£o limpos
        items_to_clear = [
            ai_service.rate_limit_cache_key,
            "openai_temp_disabled",
        ]
        
        # Limpar m√©tricas di√°rias (√∫ltimos 7 dias)
        for i in range(7):
            date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
            items_to_clear.append(f"openai_metrics_{date}")
        
        # Limpar contextos de usu√°rios
        user_ids = User.objects.values_list('id', flat=True)
        for user_id in user_ids[:50]:  # Limitar para evitar sobrecarga
            items_to_clear.append(f"user_context_{user_id}")
        
        cleared_count = 0
        for key in items_to_clear:
            if cache.get(key) is not None:
                cache.delete(key)
                cleared_count += 1
        
        self.stdout.write(f"‚úÖ {cleared_count} itens removidos do cache")

    def handle_validate_setup(self, options):
        """Valida setup completo do sistema de IA"""
        self.stdout.write("‚úÖ VALIDA√á√ÉO COMPLETA DO SETUP")
        
        validation_steps = [
            ("Configura√ß√£o OpenAI", self._validate_openai_config),
            ("Modelos de dados", self._validate_data_models),
            ("Servi√ßos de IA", self._validate_ai_services),
            ("Cache configurado", self._validate_cache_setup),
            ("Dados de teste", self._validate_test_data),
        ]
        
        passed = 0
        total = len(validation_steps)
        
        for step_name, validator in validation_steps:
            self.stdout.write(f"\nüîç {step_name}:")
            try:
                success, message = validator()
                if success:
                    self.stdout.write(f"  ‚úÖ {message}")
                    passed += 1
                else:
                    self.stdout.write(self.style.ERROR(f"  ‚ùå {message}"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"  ‚ùå Erro: {e}"))
        
        # Resultado final
        self.stdout.write(f"\nüéØ RESULTADO: {passed}/{total} valida√ß√µes passaram")
        
        if passed == total:
            self.stdout.write(self.style.SUCCESS("üéâ Sistema totalmente configurado!"))
        else:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è Alguns problemas encontrados. Verifique acima."))

    # M√©todos auxiliares

    def _get_test_user(self, user_id=None):
        """Obt√©m usu√°rio para teste"""
        if user_id:
            try:
                return User.objects.get(id=user_id)
            except User.DoesNotExist:
                self.stdout.write(
                    self.style.ERROR(f"‚ùå Usu√°rio {user_id} n√£o encontrado")
                )
                return None
        
        # Buscar usu√°rio com perfil e sess√µes
        user = User.objects.filter(
            userprofile__isnull=False,
            workoutsession__isnull=False
        ).first()
        
        if not user:
            self.stdout.write(
                self.style.ERROR("‚ùå Nenhum usu√°rio com perfil e sess√µes encontrado")
            )
            return None
        
        return user

    def _show_setup_help(self):
        """Mostra ajuda de configura√ß√£o"""
        self.stdout.write("\nüí° COMO CONFIGURAR:")
        self.stdout.write("1. Obtenha uma API key em: https://platform.openai.com/api-keys")
        self.stdout.write("2. Adicione no arquivo .env:")
        self.stdout.write("   OPENAI_API_KEY=sua_chave_aqui")
        self.stdout.write("3. Reinicie o servidor Django")

    def _show_workout_details(self, workout):
        """Mostra detalhes do treino gerado"""
        exercises = workout.get('exercises', [])
        self.stdout.write(f"  Exerc√≠cios ({len(exercises)}):")
        for ex in exercises[:3]:  # Mostrar apenas os 3 primeiros
            self.stdout.write(f"    ‚Ä¢ {ex.get('name', 'N/A')} ({ex.get('sets', 0)} s√©ries)")

    def _show_analysis_details(self, analysis):
        """Mostra detalhes da an√°lise"""
        strengths = analysis.get('strengths', [])
        if strengths:
            self.stdout.write(f"  Pontos fortes: {', '.join(strengths[:2])}")

    def _validate_openai_config(self):
        """Valida configura√ß√£o OpenAI"""
        if not settings.OPENAI_API_KEY:
            return False, "API Key n√£o configurada"
        
        ai_service = AIService()
        if not ai_service.is_available:
            return False, "Servi√ßo n√£o dispon√≠vel"
        
        return True, "Configura√ß√£o OK"

    def _validate_data_models(self):
        """Valida modelos de dados"""
        from apps.recommendations.models import Recommendation
        
        # Verificar se as tabelas existem
        try:
            User.objects.first()
            UserProfile.objects.first()
            WorkoutSession.objects.first()
            Recommendation.objects.first()
        except Exception as e:
            return False, f"Erro nos modelos: {e}"
        
        return True, "Modelos de dados OK"

    def _validate_ai_services(self):
        """Valida servi√ßos de IA"""
        try:
            ai_service = AIService()
            recommendation_engine = RecommendationEngine()
            
            if not hasattr(ai_service, 'generate_personalized_workout_plan'):
                return False, "M√©todo de gera√ß√£o de treino n√£o encontrado"
            
            return True, "Servi√ßos de IA OK"
            
        except Exception as e:
            return False, f"Erro nos servi√ßos: {e}"

    def _validate_cache_setup(self):
        """Valida configura√ß√£o de cache"""
        try:
            cache.set('test_key', 'test_value', 10)
            value = cache.get('test_key')
            cache.delete('test_key')
            
            if value != 'test_value':
                return False, "Cache n√£o funcionando corretamente"
            
            return True, "Cache funcionando"
            
        except Exception as e:
            return False, f"Erro no cache: {e}"

    def _validate_test_data(self):
        """Valida dados de teste"""
        users_count = User.objects.count()
        profiles_count = UserProfile.objects.count()
        
        if users_count < 1:
            return False, "Nenhum usu√°rio de teste encontrado"
        
        if profiles_count < 1:
            return False, "Nenhum perfil de usu√°rio encontrado"
        
        return True, f"{users_count} usu√°rios, {profiles_count} perfis"